"Neutral")
)
# Chi nhánh nào có doanh số cao nhất?
sales_by_store <- data_omit %>%
group_by(branch) %>%
summarize(total_sales = sum(total))
sales_by_store %>%
ggplot(aes(x = branch, y = total_sales)) +
geom_col(fill = 'green4') +
labs(
title = "Total Sales by Store",
subtitle = "Sales between Jan-Mar 2019",
x = "Branch",
y = "Total Sales $"
)
# Chi nhánh nào có doanh số cao nhất theo tháng?
sales_by_store_month <- data_omit %>%
group_by(branch, month) %>%
summarize(total_sales = sum(total))
sales_by_store_month %>%
ggplot(aes(x = branch, y = total_sales, fill = branch)) +
geom_col() +
labs(
title = "Sales by Branch",
subtitle = "Sales between Jan-Mar 2019",
x = "Branch",
y = "Total Sales"
) +
facet_wrap(~ month)
# Trung bình các đánh giá của mỗi chi nhánh?
avg_ratings_store <- data %>%
group_by(branch) %>%
summarize(avg_store_rating = mean(rating))
avg_ratings_store
# Phương thức thanh toán nào phổ biến nhất?
pmt_method <- data_omit %>%
group_by(payment) %>%
count()
pmt_method
avg_ratings_store
# Phương thức thanh toán nào phổ biến nhất?
pmt_method <- data_omit %>%
group_by(payment) %>%
count()
pmt_method
x <- pmt_method$n
piepercent <- round(100 * x / sum(x), 1)
pie(x,
labels = paste0(piepercent, "%"),
main = "Breakdown of Payment Methods",
col = rainbow(length(x)))
legend(
"topleft",
c("Cash", "Credit Card", "E-wallet"),
cex = 0.8,
fill = rainbow(length(x))
)
bt <- data_omit %>% group(branch) %>% summarise(total = sum(quantity))
bt <- data_omit %>% group_by(branch) %>% summarise(total = sum(quantity))
bt
bt$percent <- round(bt$total / (sum(bt$total)), 2)
bt
bt$percent <- round(bt$total / (sum(bt$total) * 100), 2)
bt
bt$percent <- round((bt$total / (sum(bt$total)) * 100), 2)
bt
View(bt)
bt$percent <- round((bt$total / (sum(data_omit$quantity)) * 100), 2)
bt
# Thống kê theo tháng: số lượng và % sp bán ra
bt1 <- data_omit %>% group_by(month) %>% summarise(total = sum(quantity))
bt1
bt1$percent <- round((bt1$total / (sum(bt1$total)) * 100), 2)
bt1
bt2 <- data_omit %>% group_by(product) %>% summarise(total = sum(quantity))
bt1$percent <- round((bt2$total / (sum(bt2$total)) * 100), 2)
bt2
bt2$percent <- round((bt2$total / (sum(bt2$total)) * 100), 2)
bt2
View(bt1)
View(bt2)
pie(x,
labels = paste0(piepercent, "%"),
main = "Breakdown of Payment Methods",
col = rainbow(length(x)))
pie(bt$total,
labels = paste0(bt$percent, "%"),
main = "Breakdown of Payment Methods",
col = rainbow(length(bt$total)))
legend(
"topleft",
c("A", "B", "C"),
cex = 0.8,
fill = rainbow(length(bt$total))
)
# thống kê số lượng sản phẩm và % theo chi nhánh
bt <- data_omit %>% group_by(branch) %>% summarise(total = sum(quantity))
bt$percent <- round((bt$total / (sum(bt$total)) * 100), 2)
bt
pie(bt$total,
labels = paste0(bt$percent, "%"),
main = "Breakdown of Payment Methods",
col = rainbow(length(bt$total)))
legend(
"topleft",
c("A", "B", "C"),
cex = 0.8,
fill = rainbow(length(bt$total))
)
bt$percent <- round((bt$total / (sum(bt$total)) * 100), 2)
bt
View(bt)
# Import library
library(tidyverse)
library(lubridate)
# Read in dataset
data = read.csv(
'https://raw.githubusercontent.com/xauuu/mid-term-r/main/sales.csv',
header = T,
na.strings = ''
)
names(data)
dim(data)
## đổi tên cột sang chữ thường
data <- rename_with(data, tolower)
## replace '.' to '_'
names(data) <- gsub("\\.", "_", names(data))
str(data)
## đổi tên cột tax_5_ thành tax_5
data <- rename(data, tax_5 = tax_5_)
str(data)
# loại bỏ trùng lặp
data <- distinct(data)
dim(data)
View(data)
summary(data)
# kiểm tra các cột char để biết các giá trị phù hợp
table(data$branch)
table(data$city)
table(data$customer_type)
table(data$gender)
table(data$product)
table(data$payment)
# thay đổi cột ngày sang kiểu Date
data$date <- as.Date(data$date, "%m/%d/%y")
str(data)
# kiểm tra số lương NA của dữ liệu
colSums(is.na(data))
# Loại bỏ NA
data_omit <- na.omit(data)
colSums(is.na(data_omit))
dim(data_omit)
# tạo cột total dựa trên số lượng và giá sp
data_omit$total <- (data_omit$unit_price * data_omit$quantity) + data_omit$tax_5
# tạo các cột mới cho năm, tháng và ngày
data_omit$year <- format(as.Date(data_omit$date), "%Y")
data_omit$month <- format(as.Date(data_omit$date), "%m")
data_omit$day <- format(as.Date(data_omit$date), "%d")
# Tạo cột tên tháng
data_omit$month_name <-
factor(
as.numeric(data_omit$month),
levels = c(1, 2, 3),
labels = c("January", "February", "March")
)
# Tạo cột thứ
data_omit$weekday <- factor(
wday(data_omit$date, week_start = 1),
levels = c(1, 2, 3, 4, 5, 6, 7),
labels = c(
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"
)
)
# thống kê số lượng sản phẩm và % theo chi nhánh
bt <- data_omit %>% group_by(branch) %>% summarise(total = sum(quantity))
bt$percent <- round((bt$total / (sum(bt$total)) * 100), 2)
bt
pie(bt$total,
labels = paste0(bt$percent, "%"),
main = "Breakdown of Payment Methods",
col = rainbow(length(bt$total)))
bt
bt$percent <- round((bt$total / (sum(bt$total)) * 100), 1)
bt
pie(bt$total,
labels = paste0(bt$percent, "%"),
main = "Breakdown of Payment Methods",
col = rainbow(length(bt$total)))
legend(
"topleft",
c("A", "B", "C"),
cex = 0.8,
fill = rainbow(length(bt$total))
)
# Thống kê theo tháng: số lượng và % sp bán ra
bt1 <- data_omit %>% group_by(month) %>% summarise(total = sum(quantity))
bt1$percent <- round((bt1$total / (sum(bt1$total)) * 100), 1)
bt1
pie(bt1$total,
labels = paste0(bt1$percent, "%"),
main = "Breakdown of Payment Methods",
col = rainbow(length(bt1$total)))
legend(
"topleft",
c("Tháng 1", "Tháng 2", "Tháng 3"),
cex = 0.8,
fill = rainbow(length(bt1$total))
)
# Thống kê theo tháng: số lượng và % sp bán ra
bt1 <- data_omit %>% group_by(month_name) %>% summarise(total = sum(quantity))
bt1$percent <- round((bt1$total / (sum(bt1$total)) * 100), 1)
bt1
bt1$percent <- round((bt1$total / (sum(bt1$total)) * 100), 2)
bt1
pie(bt1$total,
labels = paste0(bt1$percent, "%"),
main = "Breakdown of Payment Methods",
col = rainbow(length(bt1$total)))
legend(
"topleft",
c("January", "February", "March"),
cex = 0.8,
fill = rainbow(length(bt1$total))
)
sum(bt2$percent)
# Thống kê số lượng sản phẩm
bt2 <- data_omit %>% group_by(product) %>% summarise(total = sum(quantity))
bt2$percent <- round((bt2$total / (sum(bt2$total)) * 100), 1)
bt2
sum(bt2$percent)
pie(bt2$total,
labels = paste0(bt12percent, "%"),
main = "Bai 3",
col = rainbow(length(bt2$total)))
pie(bt2$total,
labels = paste0(bt2$percent, "%"),
main = "Bai 3",
col = rainbow(length(bt2$total)))
legend(
"topleft",
c("Electronic accessories", "Fashion accessories", "Food and beverages", "Health and beauty", "Home and lifestyle", "Sports and travel"),
cex = 0.8,
fill = rainbow(length(bt2$total))
)
legend(
"topleft",
Position = c(0,0),
c("Electronic accessories", "Fashion accessories", "Food and beverages", "Health and beauty", "Home and lifestyle", "Sports and travel"),
cex = 0.8,
fill = rainbow(length(bt2$total))
)
legend(
"topleft",
position  = c(0,0),
c("Electronic accessories", "Fashion accessories", "Food and beverages", "Health and beauty", "Home and lifestyle", "Sports and travel"),
cex = 0.8,
fill = rainbow(length(bt2$total))
)
legend(
"topright",
c("Electronic accessories", "Fashion accessories", "Food and beverages", "Health and beauty", "Home and lifestyle", "Sports and travel"),
cex = 0.8,
fill = rainbow(length(bt2$total))
)
pie(bt2$total,
labels = paste0(bt2$percent, "%"),
main = "Bai 3",
col = rainbow(length(bt2$total)))
legend(
"topright",
c("Electronic accessories", "Fashion accessories", "Food and beverages", "Health and beauty", "Home and lifestyle", "Sports and travel"),
cex = 0.8,
fill = rainbow(length(bt2$total))
)
View(bt)
# thống kê số lượng sản phẩm và % theo chi nhánh
bt <- data_omit %>% group_by(branch) %>% summarise(total = sum(quantity))
bt$percent <- round((bt$total / (sum(bt$total)) * 100), 1)
bt
pie(bt$total,
labels = paste0(bt$percent, "%"),
main = "Bai 1",
col = rainbow(length(bt$total)))
legend(
"topleft",
c("A", "B", "C"),
cex = 0.8,
fill = rainbow(length(bt$total))
)
# Thống kê theo tháng: số lượng và % sp bán ra
bt1 <- data_omit %>% group_by(month_name) %>% summarise(total = sum(quantity))
bt1$percent <- round((bt1$total / (sum(bt1$total)) * 100), 2)
bt1
rm(list = ls()))
rm(list = ls())
library(shiny)
shinyApp(ui, server)
server <- function(input, output) {
}
shinyApp(ui, server)
ui <- fluidPage(
title = "Tran Quang Dat",
)
shinyApp(ui, server)
ui <- fluidPage(
title = "Tran Quang Dat",
textInput("name", "what your name?"),
textOutput("xau")
)
server <- function(input, output) {
output$xau <- input$name
}
shinyApp(ui, server)
ui <- fluidPage(
title = "Tran Quang Dat",
textInput("name", "what your name?"),
textOutput("xau")
)
server <- function(input, output) {
output$xau <- renderText(input$name)
}
shinyApp(ui, server)
server <- function(input, output) {
string <- reactive(paste0("Hello ", input$name))
output$xau <- renderText(string())
}
shinyApp(ui, server)
shinyApp(ui, server)
ui1 <- fluidPage(
title = "Tran Quang Dat",
selectInput("dataset", "Choose Dataset", c("presure", "cars")),
selectInput("column", "Choose Column", character(0)),
verbatimTextOutput("summary")
)
dataset <- reactive(input$dataset, "package::datasets")
observeEvent(input$dataset, {
updateSelectInput(inputId = "column", choices = names(dataset))
})
server1 <- function(input, output) {
dataset <- reactive(get(input$dataset, "package::datasets"))
observeEvent(input$dataset, {
updateSelectInput(inputId = "column", choices = names(dataset))
})
output$summary <- renderPrint({
summary(dataset)[[input$column]]
})
}
shinyApp(ui1, server1)
ui1 <- fluidPage(
title = "Tran Quang Dat",
selectInput("dataset", "Choose Dataset", c("presure", "cars")),
selectInput("column", "Choose Column", character(0)),
verbatimTextOutput("summary")
)
server1 <- function(input, output, session) {
dataset <- reactive(get(input$dataset, "package::datasets"))
observeEvent(input$dataset, {
updateSelectInput(inputId = "column", choices = names(dataset))
})
output$summary <- renderPrint({
summary(dataset())[[input$column]])
server1 <- function(input, output, session) {
dataset <- reactive(get(input$dataset, "package::datasets"))
observeEvent(input$dataset, {
updateSelectInput(inputId = "column", choices = names(dataset))
})
output$summary <- renderPrint({
summary(dataset()[[input$column]])
})
}
shinyApp(ui1, server1)
runApp('D:/R-tqdat/Shiny/Choose a dataset.R')
runApp('D:/R-tqdat/Shiny/Tabsets.R')
d5 <- mtcars
d5 <- data("mtcars")
View(d5)
mtcars
d5 <- mtcars
intercept_only <- lm(mpg~1, data=d5)
all <- lm(mpg~., data=d5)
forward <- step(intercept_only, direction = 'forward', scope = formula(all), trace = 0)
forward$anova
forward$coefficients
#Backward stepwise selection
backward <- step(intercept_only, direction = 'backward', scope = formula(all), trace = 0)
backward$anova
backward$coefficients
#Both Direction stepwisw
both <- step(intercept_onlym direction = 'both', scope = formula(all), trace = 0)
#Both Direction stepwisw
both <- step(intercept_only, direction = 'both', scope = formula(all), trace = 0)
both$anova
both$coefficients
library(performance)
#perform forward stepwise regression
forward <- step(intercept_only, direction = 'forward', scope = formula(all), trace = 0)
#view results
forward$anova
#view final model
forward$coefficients
#Backward stepwise selection
backward <- step(intercept_only, direction = 'backward', scope = formula(all), trace = 0)
backward$anova
backward$coefficients
#Both Direction stepwisw
both <- step(intercept_only, direction = 'both', scope = formula(all), trace = 0)
both$anova
both$coefficients
#Backward stepwise selection
backward <- step(all, direction = 'backward', scope = formula(all), trace = 0)
backward$anova
backward$coefficients
shiny::runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
pred_test <- predict(model, test, type = 'response')
table(Actualvalue = test$stroke, Predictedvalue = pred_test > 0.5)
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
table(Actualvalue = test$stroke, Predictedvalue = pred_test > 0.5)
summary(test)
test %>% group_by(stroke) %>% count()
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
library(corrplot)
library(ROCR)
test_roc <- roc(test$stroke ~ pred_test, plot = TRUE, print.auc = TRUE)
glm_predict <- predict.glm(model,
newdata =  test,
type = "response",
se.fit = FALSE) %>% as_tibble()
glm_predict$pred <- ifelse(glm_predict$value >= opt$thresh, 1, 0)
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
install.packages("rlang")
install.packages("rlang")
shiny::runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
library(vctrs)
detach("package:vctrs", unload = TRUE)
runApp('D:/R-tqdat/end')
install.packages("vctrs")
shiny::runApp('D:/R-tqdat/end')
confusionMatrix(
data = glm_predict$pred,
reference = test$stroke,
positive = "1"
)
View(glm_predict)
confusionMatrix(
data = glm_predict$pred,
reference = as.factor(test$stroke),
positive = "1"
)
pred_test <- predict(stroke_initial_model, test_1, type = 'response')
pred_test <- predict(model, test_1, type = 'response')
pred_test <- predict(model, test, type = 'response')
table(Actualvalue = test$stroke, Predictedvalue = pred_test > 0.5)
pred_test
table(Actualvalue = test$stroke, Predictedvalue = pred_test > 0.5)
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
cont_tab <- table(Predicted = pred_test, Reference = test$stroke)
cont_tab
predicted <- round(pred)
predicted <- round(pred_test)
cont_tab
table(Predicted = predicted, Reference = test$stroke)
table(Reference = test$stroke, Predicted = predicted)
table(Predicted = predicted, Reference = test$stroke)
shiny::runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
runApp('D:/R-tqdat/end')
shiny::runApp('D:/R-tqdat/end')
setwd("D:/R-tqdat/end")
setwd("D:/R-tqdat/end")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
