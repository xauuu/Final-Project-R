label = scales::percent(..count.. / tapply(..count.., ..x.. , sum)[..x..])
),
stat = "count",
position = position_dodge(0.9),
vjust = -0.5
) +
ylab('Percent of Gender Group(%)') +
xlab('Gender') +
scale_y_continuous(labels = scales::percent)
# convert chr to factors
df_copy$gender = as.factor(df_copy$gender)
runApp()
runApp()
tbg2_gender <- df_copy %>% group_by(gender) %>% count(stroke)
View(tbg2_gender)
tbg2_gender <- df_copy %>% group_by(gender) %>% count(stroke) %>% mutate(pct = prop.table(n))
View(tbg2_gender)
runApp()
runApp()
runApp()
runApp()
runApp()
source("ui.R")
source("server.R")
shinyApp(ui=ui, server=server)
runApp()
runApp()
tbg2_gender <- df_copy %>% group_by(gender) %>% count(stroke) %>% mutate(pct = prop.table(n))
library(DT)
library(dplyr)
library(tidyverse)
library(gridExtra)
library(wesanderson)
df <- read.csv('dataset.csv')
# remove outlier values
df_clean <- df %>% filter(df$gender != 'Other')
df_clean = df_clean %>% filter(df_clean$bmi != 'N/A')
df_clean = na.omit(df_clean)
df_copy <- df_clean
# convert chr to factors
df_copy$gender = as.factor(df_copy$gender)
df_copy$ever_married = as.factor(df_copy$ever_married)
df_copy$work_type = as.factor(df_copy$work_type)
df_copy$Residence_type = as.factor(df_copy$Residence_type)
df_copy$smoking_status = as.factor(df_copy$smoking_status)
df_copy$bmi = as.numeric(df_copy$bmi)
df_copy$hypertension <- as.factor(df_copy$hypertension)
df_copy$heart_disease <- as.factor(df_copy$heart_disease)
tbg2_gender <- df_copy %>% group_by(gender) %>% count(stroke) %>% mutate(pct = prop.table(n))
View(tbg2_gender)
View(tbg2_gender)
tbg2_gender <- df_copy %>% group_by(gender) %>% count(stroke) %>% mutate(pct = prop.table(n))
g2_gender <- ggplot(tbg2_gender, aes(x = gender, fill = stroke), label = scales::percent(pct)) +
ylab('Percent of Gender Group(%)') +
xlab('Gender') +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <- ggplot(tbg2_gender, aes(x = gender, y=n, fill = stroke), label = scales::percent(pct)) +
ylab('Percent of Gender Group(%)') +
xlab('Gender') +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <- ggplot(tbg2_gender, aes(x = gender, y=pct, fill = stroke), label = scales::percent(pct)) +
ylab('Percent of Gender Group(%)') +
xlab('Gender') +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <- ggplot(tbg2_gender, aes(x = gender, y=pct, fill = stroke), label = scales::percent(pct)) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
ylab('Percent of Gender Group(%)') +
xlab('Gender') +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender,
aes(x = gender, y = pct, fill = stroke),
label = scales::percent(pct)) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),
vjust = -0.5,
size = 3) +
ylab('Percent of Gender Group(%)') +
xlab('Gender') +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender
g2_gender <-
ggplot(tbg2_gender,
aes(x = gender, y = pct, fill = gender),
label = scales::percent(pct)) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),
vjust = -0.5,
size = 3) +
ylab('Percent of Gender Group(%)') +
xlab('Gender') +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender, aes(gender, pct, fill = gender)) +
geom_bar(stat='identity') +
geom_text(aes(label=scales::percent(pct)), position = position_stack(vjust = .5)) +
ylab('Percent of Gender Group(%)') +
xlab('Gender') +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender, aes(gender, pct, fill = stroke)) +
geom_bar(stat='identity') +
geom_text(aes(label=scales::percent(pct)), position = position_stack(vjust = .5)) +
ylab('Percent of Gender Group(%)') +
xlab('Gender') +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, fill = stroke)) +
geom_bar(aes(y = pct), position = "dodge") +
geom_text(
aes(
y = pct,
label = scales::percent(pct)
),
stat = "count",
position = position_dodge(0.9),
vjust = -0.5
) +
ylab('Percent of Gender Group(%)') +
xlab('Gender') +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = stroke, label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)
g2_gender
View(tbg2_gender)
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = as.factor(stroke), label = scales::percent(pct))) +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = as.factor(stroke), label = scales::percent(pct))) +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = as.factor(stroke), label = scales::percent(pct))) +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = stroke, label = scales::percent(pct))) +
geom_text(position = position_dodge(width = .9),
vjust = -0.5,
size = 3) +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = stroke, label = scales::percent(pct))) +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = stroke, label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = as.factor(stroke), label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)
g2_gender
tbg2_gender <-
df_copy %>% group_by(gender) %>% count(stroke) %>% mutate(pct = prop.table(n))
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = as.factor(stroke), label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),
vjust = -0.5,
size = 3) +
labs(y = "Percent of Gender Group(%)", x = "Gender", title = "Gender Distribution by Stroke Status") +
scale_y_continuous(labels = scales::percent)
runApp()
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = as.factor(stroke), label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),
vjust = -0.5,
size = 3) +
scale_fill_manual(values = c(wes_palette("Royal2")[2], wes_palette("Royal2")[5])) +
theme_minimal() +
theme(plot.title = element_text(face = "bold")) +
labs(y = "Proportion", x = "Gender", title = "Gender Distribution by Stroke Status", fill= "Stroke") +
scale_x_discrete(labels = c("0" = "No", "1" = "Yes")) +
scale_y_continuous(labels = scales::percent)
g2_gender
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = as.factor(stroke), label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),
vjust = -0.5,
size = 3) +
scale_fill_manual(values = c(wes_palette("Royal2")[2], wes_palette("Royal2")[5])) +
theme_minimal() +
theme(plot.title = element_text(face = "bold")) +
labs(y = "Proportion", x = "Gender", title = "Gender Distribution by Stroke Status", fill= "Stroke") +
scale_x_discrete(labels = c(0 = "No", 1 = "Yes")) +
g2_gender <-
ggplot(tbg2_gender, aes(x = gender, y = pct, fill = as.factor(stroke), label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),
vjust = -0.5,
size = 3) +
scale_fill_manual(values = c(wes_palette("Royal2")[2], wes_palette("Royal2")[5])) +
theme_minimal() +
theme(plot.title = element_text(face = "bold")) +
labs(y = "Proportion", x = "Gender", title = "Gender Distribution by Stroke Status", fill= "Stroke") +
scale_x_discrete(labels = c(0 = "No", 1 = "Yes")) +
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "Stroke Analysis"),
dashboardSidebar(
sidebarMenu(
menuItem("Group 11", tabName = "group", icon = icon("user-group")),
menuItem("Dataset",
tabName = "data",
icon = icon("database")),
menuItem(
"Categorical Feature",
tabName = "categorial",
icon = icon("chart-simple")
),
menuItem(
"Exploratory Data Analysis",
tabName = "eda",
icon = icon("chart-simple")
),
menuItem("Predict", tabName = "predict", icon = icon("medal"))
)
),
dashboardBody(tabItems(
#Group tab content
tabItem(tabName = "group",
fluidRow(
infoBox("19IT1",
"Tran Quang Dat",
"19IT006",
icon = icon("snowflake")),
infoBox(
"19IT1",
"Nguyen Van An",
"19IT001",
icon = icon("pagelines"),
color = "olive",
),
infoBox(
"19IT1",
"Ngo Thi Huong Giang",
"19IT008",
icon = icon("wand-magic-sparkles"),
color = "purple"
),
)),
# Dataset tab content
tabItem(
tabName = "data",
tabBox(
id = "t1",
width = 12,
tabPanel("About", icon = icon("address-card"),
fluidRow(
column(
width = 8,
tags$img(
src = "stroke1.jpg",
width = '100%',
height = 'auto',
object = 'cover'
),
),
column(
width = 4,
tags$br() ,
tags$h4(
"According to the World Health Organization (WHO) stroke is the 2nd leading cause of death globally, responsible for approximately 11% of total deaths."
),
tags$h4(
"This dataset is used to predict whether a patient is likely to get stroke based on the input parameters like gender, age, various diseases, and smoking status. Each row in the data provides relavant information about the patient."
)
)
)),
tabPanel("Data", dataTableOutput("dataT"), icon = icon("table")),
tabPanel(
"Structure",
verbatimTextOutput("structure"),
icon = icon("uncharted")
),
tabPanel("Summary",
verbatimTextOutput("summary"),
icon = icon("chart-pie"))
)
),
# Second tab content
tabItem(
tabName = "categorial",
fluidRow(
box(
width = 4,
plotOutput("g1_gender"),
tags$p(
"There are more Female patients than Male. The one entry that was stated as Other was added to the Female section since majority are female patients."
)
),
box(
width = 4,
plotOutput("g1_married"),
tags$p(
"Roughly double the amount of patients have been married before than those who have not."
)
),
box(
width = 4,
plotOutput("g1_residence"),
tags$p(
"The patients are nearly evenly distributed between rural and urban residences"
)
)
),
fluidRow(
box(
width = 4,
plotOutput("g1_hyper"),
tags$p(
"The number of patients without hypertension is vastly greater than the number of patients with hypertension, but the gap is slightly less than the gap seen for stroke victims."
)
),
box(
width = 4,
plotOutput("g1_heart"),
tags$p(
"The gap between patients with and without heart disease more closely resembles the gap between those with and without strokes."
)
),
box(
width = 4,
plotOutput("g1_stroke"),
tags$p(
"The number of patients who have not had strokes is vastly greater than the number of patients who have."
),
),
box(
width = 12,
plotOutput("g1_work"),
tags$p(
"There are approximately even amounts of patients that are working government jobs, are self-employed, and are children. The majority of patients work for private companies, and a small number have never worked."
)
),
box(
width = 12,
plotOutput("g1_smoking"),
tags$p(
"The unknown data was randomly added to the three categories above based of the probability. Most patients have either never smoked. The data for formerly and currently smokers are similar."
)
),
)
),
tabItem(tabName = "eda",
box(
plotOutput("g2_gender")
)),
box(
plotOutput("g2_gender")
)),
box(
plotOutput("g2_gender")
)),
box(
plotOutput("g2_gender")
)),
output$g2_hyper <- renderPlot({
g2_hyper
})
output$g2_hyper <- renderPlot({
g2_hyper
})}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df_copy)
runApp()
runApp()
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% count(stroke) %>% mutate(pct = n / count(df_copy))
View(tbg2_heart)
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% count(stroke) %>% mutate(pct = (n / count(df_copy)))
View(tbg2_heart)
View(tbg2_gender)
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% count(stroke) %>% mutate(pct = n())
View(tbg2_heart)
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% count(stroke) %>% mutate(pct = n)
View(tbg2_gender)
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% summarise(count = n()) %>% mutate(pct = n)
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% summarise(count = count()) %>% mutate(pct = n)
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% summarise(count = count(n)) %>% mutate(pct = n)
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% summarise(count = n()) %>% mutate(pct = n)
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% summarise(count = n()) %>% mutate(pct = count)
View(tbg2_heart)
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% count(stroke) %>% mutate(pct = n)
View(tbg2_heart)
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% count(stroke) %>% mutate(pct = n/sum(n))
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% count(stroke) %>% mutate(pct = n/sum(df_copy))
tbg2_heart <-
df_copy %>% group_by(heart_disease, stroke) %>% summarise(cnt = n()) %>% mutate(pct = cnt /sum(cnt ))
tbg2_heart <-
df_copy %>% group_by(heart_disease, stroke) %>% summarise(cnt = n()) %>% mutate(pct = cnt /sum(cnt))
View(tbg2_heart)
tbg2_heart <-
df_copy %>% group_by(heart_disease, stroke) %>% summarise(cnt = n())
tbg2_heart <-
df_copy %>% group_by(heart_disease, stroke) %>% summarise(cnt = n()) %>% mutate(pct = cnt /sum(df_copy))
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% count(stroke) %>% mutate(pct = n/rowSums(df_copy))
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% count(stroke) %>% mutate(pct = n/rowSums(df_copy))
tbg2_heart <-
df_copy %>% group_by(heart_disease) %>% count(stroke)
tbg2_heart$pct <- tbg2_heart$n / sum(df_copy)
tbg2_heart$pct <- tbg2_heart$n / rowSums(df_copy)
tbg2_heart$pct <- tbg2_heart$n / sum(n)
tbg2_heart$pct <- tbg2_heart$n / sum(tbg2_heart$n)
runApp()
View(df_copy)
runApp()
source("ui.R")
source("server.R")
runApp()
runApp()
setwd("D:/R-tqdat/end-term")
setwd("D:/R-tqdat/end-term")
runApp()
runApp()
library(corrplot)
runApp()
runApp()
View(df_num)
runApp()
runApp()
corrplot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("D:/R-tqdat/end")
runApp()
runApp()
View(df_copy)
runApp()
View(tbg2_hyper)
runApp()
